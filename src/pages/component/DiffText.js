import React, { Component } from 'react'
// const Diff = require('diff')
import { Diff2Html } from 'diff2html'
import classnames from 'classnames'
// import { Diff } from 'diff'
// import Diff from 'diff'
import getJSON from '../../fetch.js'
import style from './diffText.less'

class TestHttp extends Component{
    constructor(props){
        super(props)
        this.state = {
            defaultText: 'list\n     key1: value1\n     key2: value',
            newText: 'list\n     key1: new value1\n     key2: value2\n     key: value3',
            // defaultText: 'list\n     key1: value1',
            // newText: 'list\n     key1: new value1',
            diffResult: [],
            diffHtml: '',
        }
    }
    componentDidMount = _ => {
        // this.getDiffResult()
        let strInput = "--- a/server/vendor/golang.org/x/sys/unix/zsyscall_linux_mipsle.go\n+++ b/server/vendor/golang.org/x/sys/unix/zsyscall_linux_mipsle.go\n@@ -1035,6 +1035,17 @@ func Prctl(option int, arg2 uintptr, arg3 uintptr, arg4 uintptr, arg5 uintptr) (\n \n // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n \n+func Pselect(nfd int, r *FdSet, w *FdSet, e *FdSet, timeout *Timespec, sigmask *Sigset_t) (n int, err error) {\n+\tr0, _, e1 := Syscall6(SYS_PSELECT6, uintptr(nfd), uintptr(unsafe.Pointer(r)), uintptr(unsafe.Pointer(w)), uintptr(unsafe.Pointer(e)), uintptr(unsafe.Pointer(timeout)), uintptr(unsafe.Pointer(sigmask)))\n+\tn = int(r0)\n+\tif e1 != 0 {\n+\t\terr = errnoErr(e1)\n+\t}\n+\treturn\n+}\n+\n+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n+\n func read(fd int, p []byte) (n int, err error) {\n \tvar _p0 unsafe.Pointer\n \tif len(p) > 0 {\n";
        let outputHtml = Diff2Html.getPrettyHtml(strInput, {
            inputFormat: 'diff', showFiles: true, matching: 'lines'
        });
        // console.log(outputHtml)
        document.getElementById('test').innerHTML = outputHtml
    }

    setDefaultValue = e => {
        this.setState({ defaultText: e.target.value})
        // console.log(e.target.value)
    }

    setNewValue = e => {
        this.setState({ newText: e.target.value})
        // console.log(e.target.value)
    }

    getDiffResult = _ => {
        const { newText, defaultText } = this.state
        // jsDiff
        // const diffResult = Diff.diffTrimmedLines(
        const diffResult = Diff.diffLines(
            defaultText,
            newText,
            { newlineIsToken: true }
        )
        this.setState({ diffResult })
        console.log(diffResult, 'enter')

        // diff2html
        // const html = Diff2Html.getPrettyHtml(defaultText, {inputFormat: 'diff', showFiles: true, matching: 'lines'})
        // console.log(html, 'result')
        // document.getElementById('result').innerHTML = html
        // this.setState({ diffHtml: html })
    }

    render(){
        const { diffResult, newText, defaultText, diffHtml } = this.state
        // console.log(diffResult, 'render')
        return (
            <div id="test" style={{ width: '100%', height: '100%' }}>
                <textArea value={defaultText} onChange={this.setDefaultValue} />
                <br />
                <textArea value={newText} onChange={this.setNewValue} />
                <br />
                <button onClick={this.getDiffResult}>compare</button>
                {diffResult.map((item, index) => {
                    let formatValue = item.value
                    if(item.value[0] === '\n'){
                        formatValue = item.value.replace('\n', '')
                    }
                    return (
                        item.value !== '\n' ? (
                            <div
                                key={index}
                                className={classnames({
                                    [style.normal]: true,
                                    // item.added ? style.green : '',
                                    // item.removed ? style.red : '',
                                    [style.green]: item.added,
                                    [style.red]: item.removed
                                })}
                            >
                                {formatValue}
                            </div>
                        )
                            :
                            null
                    )
                })}
                {/*{diffResult.map((item, index) => {
                    const color= item.added ? 'green' : item.removed ? 'red' : 'gray'
                    return (
                        <div
                            key={index}
                            style={{ color, whiteSpace: 'pre' }}
                        >
                            {item.added && '+'}
                            {item.removed && '-'}
                            {(!item.added && !item.removed) && '   ' }
                            {item.value}
                        </div>
                    )
                })} */}
                {/* <p>{defaultText}</p>
                <div style={{ whiteSpace: 'pre-line' }}>test\n123</div>
                <pre>test\n123</pre>
                <span style={{ whiteSpace: 'pre' }}>1     2      33333</span> */}
            </div>
        )
    }
}

export default TestHttp